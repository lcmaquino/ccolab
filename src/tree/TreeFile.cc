/**
 * @file TreeFile.cc
 *
 *  Copyright 2022 Luiz C. M. de Aquino.
 * 
 *  This file is part of CCOLab.
 *
 *  CCOLab is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  CCOLab is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with CCOLab.  If not, see <https://www.gnu.org/licenses/>
 *
 */

/**
 * @author Luiz ClÃ¡udio Mesquita de Aquino (luiz.aquino@ufvjm.edu.br)
 * @brief
 * @version 1.0
 * @date 2022-05-18
 */
#include "TreeFile.h"

TreeFile::TreeFile(TreeModel *tree) { _tree = tree; }

TreeModel *TreeFile::tree() { return _tree; }

void TreeFile::setTree(TreeModel *tree) { _tree = tree; }

void TreeFile::save(string filename) {
  int i;
  ofstream treefile;
  Segment *segment;
  int numberOfSegments = _tree->currentNumberOfSegments();
  Point seed = _tree->seed();
  double lengthUnit = _tree->lengthUnit();
  double z = _tree->dimension() == 2 ? 0.0 : seed.z();
  treefile.open(filename);
  if (treefile.is_open()) {
    treefile << "# vtk DataFile Version 3.0" << endl;
    treefile << "Tree generated by CCOLab 1.0" << endl;
    treefile << "ASCII" << endl;
    treefile << "DATASET POLYDATA" << endl;
    treefile << "POINTS " << numberOfSegments + 1 << " double" << endl;
    treefile << lengthUnit * seed.x() << " " << lengthUnit * seed.y() << " "
             << lengthUnit * z << endl;
    for (i = _tree->begin(); i < _tree->end(); i++) {
      segment = _tree->segment(i);
      z = _tree->dimension() == 2 ? 0.0 : segment->point().z();
      treefile << lengthUnit * segment->point().x() << " "
               << lengthUnit * segment->point().y() << " " << lengthUnit * z
               << endl;
    }
    treefile << endl;
    treefile << "LINES " << numberOfSegments << " " << 3 * numberOfSegments
             << endl;
    treefile << "2 0 1" << endl;
    for (i = _tree->begin(); i < _tree->end(); i++) {
      segment = _tree->segment(i);
      if (!_tree->isTerminal(i)) {
        treefile << "2 " << segment->ID() + 1 << " " << segment->left() + 1
                 << endl;
        treefile << "2 " << segment->ID() + 1 << " " << segment->right() + 1
                 << endl;
      }
    }
    treefile << endl;
    treefile << "CELL_DATA " << numberOfSegments << endl;
    treefile << "SCALARS radius double" << endl;
    treefile << "LOOKUP_TABLE default" << endl;
    treefile << std::setprecision(numeric_limits<double>::digits10 + 1)
             << _tree->radius(_tree->root().ID()) << endl;
    for (i = _tree->begin(); i < _tree->end(); i++) {
      segment = _tree->segment(i);
      if (!_tree->isTerminal(i)) {
        treefile << std::setprecision(numeric_limits<double>::digits10)
                 << _tree->radius(segment->left()) << endl;
        treefile << std::setprecision(numeric_limits<double>::digits10)
                 << _tree->radius(segment->right()) << endl;
      }
    }
    treefile.close();
  } else {
    cout << "Unable to open: \"" << filename << "\"." << endl;
  }
}
